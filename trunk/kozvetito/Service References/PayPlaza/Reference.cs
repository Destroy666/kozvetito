//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace kozvetito.PayPlaza {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://services.voxpay.hu/", ConfigurationName="PayPlaza.PayPlazaServiceV5Soap")]
    public interface PayPlazaServiceV5Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.voxpay.hu/GetTridStr", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTridStr();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.voxpay.hu/GetTridStr", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTridStrAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.voxpay.hu/GetPaymentDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetPaymentDetails(string trid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.voxpay.hu/GetPaymentDetails", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetPaymentDetailsAsync(string trid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.voxpay.hu/PreparePayment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode PreparePayment(string trid, string merchantCode, string returnUrl, string notificationUrl, string productsXml, string currency, string language, string shopRemark, string shopImageUrl, bool isTestMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.voxpay.hu/PreparePayment", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> PreparePaymentAsync(string trid, string merchantCode, string returnUrl, string notificationUrl, string productsXml, string currency, string language, string shopRemark, string shopImageUrl, bool isTestMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.voxpay.hu/DirectPay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode DirectPay(string trid, string merchantCode, string userEmail, string userID, string returnUrl, string notificationUrl, string productsXml, string invoiceXml, bool needInvoice, string shopRemark, bool isTestMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.voxpay.hu/DirectPay", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> DirectPayAsync(string trid, string merchantCode, string userEmail, string userID, string returnUrl, string notificationUrl, string productsXml, string invoiceXml, bool needInvoice, string shopRemark, bool isTestMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.voxpay.hu/PaymentRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode PaymentRequest(string trid, string merchantCode, string userEmail, string userPhone, string productsXml, string paymentMethod, string returnUrl, string notificationUrl, string currency, string language, string shopRemark, string invoiceForXml, bool needInvoice, bool isTestMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.voxpay.hu/PaymentRequest", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> PaymentRequestAsync(string trid, string merchantCode, string userEmail, string userPhone, string productsXml, string paymentMethod, string returnUrl, string notificationUrl, string currency, string language, string shopRemark, string invoiceForXml, bool needInvoice, bool isTestMode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PayPlazaServiceV5SoapChannel : kozvetito.PayPlaza.PayPlazaServiceV5Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PayPlazaServiceV5SoapClient : System.ServiceModel.ClientBase<kozvetito.PayPlaza.PayPlazaServiceV5Soap>, kozvetito.PayPlaza.PayPlazaServiceV5Soap {
        
        public PayPlazaServiceV5SoapClient() {
        }
        
        public PayPlazaServiceV5SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PayPlazaServiceV5SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PayPlazaServiceV5SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PayPlazaServiceV5SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetTridStr() {
            return base.Channel.GetTridStr();
        }
        
        public System.Threading.Tasks.Task<string> GetTridStrAsync() {
            return base.Channel.GetTridStrAsync();
        }
        
        public System.Xml.XmlNode GetPaymentDetails(string trid) {
            return base.Channel.GetPaymentDetails(trid);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetPaymentDetailsAsync(string trid) {
            return base.Channel.GetPaymentDetailsAsync(trid);
        }
        
        public System.Xml.XmlNode PreparePayment(string trid, string merchantCode, string returnUrl, string notificationUrl, string productsXml, string currency, string language, string shopRemark, string shopImageUrl, bool isTestMode) {
            return base.Channel.PreparePayment(trid, merchantCode, returnUrl, notificationUrl, productsXml, currency, language, shopRemark, shopImageUrl, isTestMode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> PreparePaymentAsync(string trid, string merchantCode, string returnUrl, string notificationUrl, string productsXml, string currency, string language, string shopRemark, string shopImageUrl, bool isTestMode) {
            return base.Channel.PreparePaymentAsync(trid, merchantCode, returnUrl, notificationUrl, productsXml, currency, language, shopRemark, shopImageUrl, isTestMode);
        }
        
        public System.Xml.XmlNode DirectPay(string trid, string merchantCode, string userEmail, string userID, string returnUrl, string notificationUrl, string productsXml, string invoiceXml, bool needInvoice, string shopRemark, bool isTestMode) {
            return base.Channel.DirectPay(trid, merchantCode, userEmail, userID, returnUrl, notificationUrl, productsXml, invoiceXml, needInvoice, shopRemark, isTestMode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> DirectPayAsync(string trid, string merchantCode, string userEmail, string userID, string returnUrl, string notificationUrl, string productsXml, string invoiceXml, bool needInvoice, string shopRemark, bool isTestMode) {
            return base.Channel.DirectPayAsync(trid, merchantCode, userEmail, userID, returnUrl, notificationUrl, productsXml, invoiceXml, needInvoice, shopRemark, isTestMode);
        }
        
        public System.Xml.XmlNode PaymentRequest(string trid, string merchantCode, string userEmail, string userPhone, string productsXml, string paymentMethod, string returnUrl, string notificationUrl, string currency, string language, string shopRemark, string invoiceForXml, bool needInvoice, bool isTestMode) {
            return base.Channel.PaymentRequest(trid, merchantCode, userEmail, userPhone, productsXml, paymentMethod, returnUrl, notificationUrl, currency, language, shopRemark, invoiceForXml, needInvoice, isTestMode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> PaymentRequestAsync(string trid, string merchantCode, string userEmail, string userPhone, string productsXml, string paymentMethod, string returnUrl, string notificationUrl, string currency, string language, string shopRemark, string invoiceForXml, bool needInvoice, bool isTestMode) {
            return base.Channel.PaymentRequestAsync(trid, merchantCode, userEmail, userPhone, productsXml, paymentMethod, returnUrl, notificationUrl, currency, language, shopRemark, invoiceForXml, needInvoice, isTestMode);
        }
    }
}
